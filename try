import tensorflow as tf
from tensorflow.keras.layers import Input, Conv2D, MaxPooling2D, Flatten, LSTM, Dense, Bidirectional, Concatenate
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
import numpy as np

# Define a simple CNN model
def build_cnn_model(input_shape, num_classes):
    input_layer = Input(shape=input_shape)
    conv1 = Conv2D(32, (3, 3), activation='relu')(input_layer)
    pool1 = MaxPooling2D((2, 2))(conv1)
    conv2 = Conv2D(64, (3, 3), activation='relu')(pool1)
    pool2 = MaxPooling2D((2, 2))(conv2)
    flatten = Flatten()(pool2)
    output_layer = Dense(num_classes, activation='softmax')(flatten)
    model = Model(inputs=input_layer, outputs=output_layer)
    return model

# Define a simple RNN model
def build_rnn_model(input_shape, num_classes):
    input_layer = Input(shape=input_shape)
    rnn = LSTM(64)(input_layer)
    output_layer = Dense(num_classes, activation='softmax')(rnn)
    model = Model(inputs=input_layer, outputs=output_layer)
    return model

# Define a Deep BiLSTM model
def build_deep_bilstm_model(input_shape_cnn, input_shape_rnn, num_classes):
    # Create separate CNN and RNN models
    cnn_model = build_cnn_model(input_shape_cnn, num_classes)
    rnn_model = build_rnn_model(input_shape_rnn, num_classes)

    # Freeze the weights of the CNN and RNN models
    for layer in cnn_model.layers:
        layer.trainable = False
    for layer in rnn_model.layers:
        layer.trainable = False

    # Combine the output of the CNN and RNN models
    cnn_output = cnn_model.output
    rnn_output = rnn_model.output
    concatenated_features = Concatenate(axis=-1)([cnn_output, rnn_output])
    from tensorflow.keras.layers import Reshape
    # Create the Deep BiLSTM model
    reshaped_features = Reshape((20, 1))(concatenated_features)

    # Build the BiLSTM layers
    lstm = Bidirectional(LSTM(64))(reshaped_features)
    output_layer = Dense(num_classes, activation='softmax')(lstm)

    # Create the Deep BiLSTM model
    model = Model(inputs=[cnn_model.input, rnn_model.input], outputs=output_layer)
    return model

# Example usage
input_shape_cnn = (28, 28, 1)  # Example input shape for images
input_shape_rnn = (20, 10)  # Example input shape for RNN (20 sequences of length 10)
num_classes = 10  # Number of classes for classification

deep_bilstm_model = build_deep_bilstm_model(input_shape_cnn, input_shape_rnn, num_classes)
deep_bilstm_model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Dummy data for training (replace this with your actual data)
cnn_images = np.random.randn(100, 28, 28, 1)
rnn_sequences = np.random.randn(100, 20, 10)
labels = np.random.randint(0, num_classes, 100)

deep_bilstm_model.fit([cnn_images, rnn_sequences], labels, epochs=5)
